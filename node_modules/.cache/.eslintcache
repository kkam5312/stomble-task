[{"/Users/justinkam/Desktop/stomble/login-form/src/index.js":"1","/Users/justinkam/Desktop/stomble/login-form/src/App.js":"2","/Users/justinkam/Desktop/stomble/login-form/src/reportWebVitals.js":"3","/Users/justinkam/Desktop/stomble/login-form/src/components/registerForm.jsx":"4","/Users/justinkam/Desktop/stomble/login-form/src/components/loginForm.jsx":"5"},{"size":500,"mtime":1643331603009,"results":"6","hashOfConfig":"7"},{"size":3488,"mtime":1643417689452,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1643244862224,"results":"9","hashOfConfig":"7"},{"size":1685,"mtime":1643332021077,"results":"10","hashOfConfig":"7"},{"size":1778,"mtime":1643417038741,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"dzx4w9",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/justinkam/Desktop/stomble/login-form/src/index.js",[],["25","26"],"/Users/justinkam/Desktop/stomble/login-form/src/App.js",["27"],"import React, { useState } from 'react';\nimport LoginForm from './components/loginForm';\nimport RegisterForm from './components/registerForm';\nimport GoogleLogin from 'react-google-login';\n\nconst initialUsers = [\n  {username: \"admin\", password: \"admin123\"}, \n  {username: \"jake\", password: \"jake123\"}, \n  {username: \"bob\", password: \"bob123\"}, \n  {username: \"test\", password: \"test123\"}\n];\n\nfunction App() {\n  // register or login boolean variable\n  const [register, setRegister] = useState(false);\n  // list of registered users\n  const [users, setUsers] = useState(initialUsers)\n  // currently logged in user\n  const [user, setUser] = useState({username: \"\", password: \"\"})\n  const [error, setError] = useState(\"\")\n\n  /**\n   * Basic login function\n   * @param {*} details \n   * If the user is valid, this function will set the current user and they will proceed to the welcome page.\n   */\n  const Login = details => {\n    // Looping through valid users\n    for (let i = 0; i < users.length; i++) {\n      if (details.username === users[i].username && details.password === users[i].password) {\n        setUser({\n          username: details.username, \n          password: details.password\n        });\n        setError(\"\");\n        break;\n      } else {\n        continue;\n      }\n    }\n    if (user.username === \"\" && user.password === \"\") {\n      setError(\"Invalid username or password. Please try again\");\n    }\n  }\n\n  /*\n  * Basic logout function\n  * Resets the current user to an empty user. Also resets the error message. \n  */\n  const Logout = () => {;\n    setError(\"\");\n    setUser({username: \"\", password: \"\"});\n  }\n  /**\n   * Allows the interface to switch between the register and login screens by manipulating the {register} boolean constant. \n   */\n  const handleRegister = () => {\n    setRegister(!register)\n    setError(\"\");\n  }\n  /**\n   * Basic register function\n   * @param {*} details \n   * Will check whether the username and password entered is valid (non-empty and contains more than 3 characters for the password)\n   * If valid, inserts the new user into the users list. \n   */\n  const Register = (details) => {\n    if (details.username.length > 0 && details.password.length >= 4) {\n      const newList = users.concat({username: details.username, password: details.password});\n      setUsers(newList);\n      setUser({\n        username: details.username, \n        password: details.password\n      });\n      setError(\"\");\n    } else {\n      setError(\"Please use a valid username and a password more than 3 characters.\");\n    }\n  }\n  /**\n   * Handler for the google login button\n   * @param {*} response \n   * Will log the user in using the information provided from the google account used. \n   */\n  const responseGoogle = (response) => {\n    setUser({username: response.profileObj.name, password: \"\"})\n  }\n\n  return (\n    <div className=\"App\">\n      {(user.username !== \"\") ? (\n        <div className='welcome'>\n          <h2>Welcome, <span>{user.username}</span></h2>\n          <h3>Do you like.... hololive?</h3>\n          <button onClick={Logout}>Logout</button>\n        </div>  \n      ) : (\n        <div className='loginForms'>\n          {((!register) ? (\n            <LoginForm responseGoogle={responseGoogle} Login={Login} error={error} handleRegister={handleRegister}/>\n          ) : (<RegisterForm responseGoogle={responseGoogle} Register={Register} error={error} handleRegister={handleRegister}/>))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/justinkam/Desktop/stomble/login-form/src/reportWebVitals.js",[],"/Users/justinkam/Desktop/stomble/login-form/src/components/registerForm.jsx",["28"],"import React, { useState } from 'react';\nimport GoogleLogin from 'react-google-login';\n\n\nfunction RegisterForm({ Register, error, handleRegister, responseGoogle }) {\n    const [details, setDetails] = useState({username:\"\", password:\"\"});\n\n    const submitHandler = e => {\n        e.preventDefault();\n\n        Register(details)\n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"form-inner\">\n                <h2>Register</h2>\n                {(error != \"\") ? (<div className='error'>{error}</div>) : \"\"}\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\">Enter a username:</label>\n                    <input type=\"text\" name=\"username\" id=\"username\" onChange={e => setDetails({...details, username: e.target.value})} value={details.username} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">Enter a password:</label>\n                    <input type=\"text\" name=\"password\" id=\"password\" onChange={e => setDetails({...details, password: e.target.value})} value={details.password} />\n                </div>\n            <input type=\"submit\" value=\"Register\" />\n            <input type=\"button\" onClick={handleRegister} value=\"Back\" />\n            <GoogleLogin\n                clientId=\"354651288125-9hejnqlt9fpd2vt1bq1a0ofcs7ujn6nf.apps.googleusercontent.com\"\n                buttonText=\"Log in with Google\"\n                onSuccess={responseGoogle}\n                onFailure={responseGoogle}\n                cookiePolicy={'single_host_origin'}\n            />\n            </div>\n            \n        </form>\n    )\n}\n\nexport default RegisterForm","/Users/justinkam/Desktop/stomble/login-form/src/components/loginForm.jsx",["29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":18,"column":25,"nodeType":"40","messageId":"41","endLine":18,"endColumn":27},{"ruleId":"38","severity":1,"message":"39","line":18,"column":25,"nodeType":"40","messageId":"41","endLine":18,"endColumn":27},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'GoogleLogin' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]